using Microsoft.Extensions.Logging;
using System.Reflection;
using System.Text;

namespace Paradigm.Enterprise.CodeGenerator.Generators.SqlServer;
internal class SqlServerParameterMapperGenerator
{
    private readonly ILogger _logger;
    private readonly string _mappersOutputPath;
    private readonly string _projectName;

    /// <summary>
    /// Initializes a new instance of the <see cref="SqlServerParameterMapperGenerator" /> class.
    /// </summary>
    /// <param name="mappersOutputPath">The mappers output path.</param>
    /// <param name="projectName">Name of the project.</param>
    /// <param name="logger">The logger.</param>
    public SqlServerParameterMapperGenerator(string mappersOutputPath, string? projectName, ILogger logger)
    {
        _logger = logger;
        _projectName = projectName ?? string.Empty;
        _mappersOutputPath = mappersOutputPath;
    }

    /// <summary>
    /// Generates the mapper code.
    /// </summary>
    /// <param name="genericArguments">The generic arguments.</param>
    /// <param name="generatedTypes">The generated types.</param>
    public void GenerateMapperCode(Type[] genericArguments, List<string> generatedTypes)
    {
        foreach (var genericArgument in genericArguments)
        {
            var targetType = Nullable.GetUnderlyingType(genericArgument) ?? genericArgument;

            if (string.IsNullOrWhiteSpace(targetType?.FullName) || generatedTypes.Contains(targetType.FullName))
                continue;

            var mapperClassName = $"{targetType.Name}Mapper";
            var propertyAssignments = new StringBuilder();

            foreach (var property in targetType.GetProperties())
                GenerateSqlParameterMapperPropertyAssignments(propertyAssignments, property, targetType.Name);

            var sourceCode = $@"// <auto-generated/>
using {_projectName}.Data.Core.StoredProcedures.Mappers;
using {targetType.Namespace};

namespace {_projectName}.Data.Mappers.SqlParameters;

internal partial class {mapperClassName} : SqlParameterMapperBase
{{
    protected override void AddSqlParameters(object parameters)
    {{
        if (!(parameters is {targetType.Name} instance)) return;

{propertyAssignments}
    }}
}}";

            var fileName = $"{mapperClassName}.cs";
            File.WriteAllText(Path.Combine(_mappersOutputPath, fileName), sourceCode);
            generatedTypes.Add(targetType.FullName);
            _logger.LogInformation($"Generated '{fileName}'.");
        }
    }

    /// <summary>
    /// Generates the SQL parameter mapper property assignments.
    /// </summary>
    /// <param name="propertyAssignments">The property assignments.</param>
    /// <param name="property">The property.</param>
    /// <param name="targetTypeName">Name of the target type.</param>
    /// <exception cref="InvalidOperationException">Couldn't resolve property assignment for type {propertyType.Name}</exception>
    private void GenerateSqlParameterMapperPropertyAssignments(StringBuilder propertyAssignments, PropertyInfo property, string targetTypeName)
    {
        var propertyName = property.Name;
        var propertyType = property.PropertyType;

        var generateDataTableParameter = false;
        var generateSingleRowDataTableParameter = false;

        if (propertyType.IsGenericType)
        {
            var genericType = propertyType.GetGenericTypeDefinition();
            if (genericType == typeof(IEnumerable<>))
            {
                propertyType = propertyType.GetGenericArguments().FirstOrDefault();
                generateDataTableParameter = true;
            }
            else if (genericType == typeof(Nullable<>))
                propertyType = Nullable.GetUnderlyingType(propertyType);
            else
                return;
        }
        else if (propertyType.IsClass && !"System".Equals(propertyType.Namespace))
            generateSingleRowDataTableParameter = true;

        if (propertyType is null)
            return;

        if (generateDataTableParameter || generateSingleRowDataTableParameter)
        {
            var itemProperties = propertyType.GetProperties();
            if (itemProperties.Length == 0) return;

            propertyAssignments.AppendLine(string.Empty);
            propertyAssignments.AppendLine($"        if (instance.{propertyName} is not null)");
            propertyAssignments.AppendLine("        {");
            propertyAssignments.AppendLine($"            var table{propertyName} = new System.Data.DataTable();");

            foreach (var itemProperty in itemProperties)
            {
                var itemPropertyType = Nullable.GetUnderlyingType(itemProperty.PropertyType) ?? itemProperty.PropertyType;
                propertyAssignments.AppendLine($"            table{propertyName}.Columns.Add(\"{itemProperty.Name}\", typeof({itemPropertyType.FullName}));");
            }

            if (generateDataTableParameter)
            {
                propertyAssignments.AppendLine($"            foreach (var item in instance.{propertyName})");
                propertyAssignments.AppendLine("            {");
                propertyAssignments.AppendLine($"                var dataRow = table{propertyName}.NewRow();");

                foreach (var itemProperty in itemProperties)
                    propertyAssignments.AppendLine($"                dataRow[\"{itemProperty.Name}\"] = item.{itemProperty.Name};");

                propertyAssignments.AppendLine($"                table{propertyName}.Rows.Add(dataRow);");
                propertyAssignments.AppendLine("            }");
            }
            else
            {
                propertyAssignments.AppendLine(string.Empty);
                propertyAssignments.AppendLine($"            var dataRow = table{propertyName}.NewRow();");

                foreach (var itemProperty in itemProperties)
                    propertyAssignments.AppendLine($"            dataRow[\"{itemProperty.Name}\"] = instance.{propertyName}.{itemProperty.Name};");

                propertyAssignments.AppendLine($"            table{propertyName}.Rows.Add(dataRow);");
            }


            propertyAssignments.AppendLine($"            AddSqlParameter(nameof({targetTypeName}.{propertyName}), table{propertyName});");
            propertyAssignments.AppendLine("        }");
        }
        else
            propertyAssignments.AppendLine($"        AddSqlParameter(nameof({targetTypeName}.{propertyName}), instance.{propertyName});");
    }
}